#!/bin/bash

# Helper Functions
# -----------------------------------------------------------------------------

to_abs_dir() {
    if [[ "$1" == /* ]]; then
        echo "$1"
    else
        echo "$(pwd)/$1"
    fi
}

to_rel_dir() {
    python -c "import os.path; print os.path.relpath(\"${1}\", \"${2}\")"
}



# Argument Processing
# -----------------------------------------------------------------------------

workingdir=.
exportdir=$(pwd)
name="None"
video=""
audio=""

# Check that we have dockerdir
arg_check_config() {
    if [ -z "$DOCKERDIR" ]; then
        echo "Error: DOCKERDIR is undefined"
        exit 1
    fi
}

# Check that the specified docker image has been defined
arg_image() {
    name="$1"
    if [ ! -f "$DOCKERDIR/$name/Dockerfile" ]; then
        echo "Error: $name has no Dockerfile"
        exit 1
    fi
}


# Docker commands
# -----------------------------------------------------------------------------
docker_build() {
    # Attempt to build the image
    # TODO don't do this if the image is ready
    docker build --build-arg userID=$UID --build-arg username=$USER -t "$name" "$DOCKERDIR/$name"
}

docker_run() {
    # Run our command in the docker image
    fullcommand="$@"
    docker run -it $video $opengl -w /${dirname}/${workingdir} -v "${exportdir}:/${dirname}" "$name" $fullcommand
}


# Main
# -----------------------------------------------------------------------------
main() {
    local build=false
    arg_check_config
    if [ "$1" == "-b" ]; then
        build=true
        shift 1
    fi
    if [ "$1" == "-d" ]; then
        exportdir=$(to_abs_dir "$2")
        to_abs_dir "$2"
        workingdir=$(to_rel_dir $(pwd) $exportdir)
        shift 2
    fi
    if [ "$1" == "-x" ]; then
        video="-e DISPLAY=unix$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix"
        shift 1
    fi
    if [ "$1" == "-a" ]; then
        audio="--device /dev/snd"
        shift 1
    fi
    arg_image $@
    shift 1
    dirname=$(basename $(readlink -f $exportdir))

    if [ $build == true ]; then
        docker_build
        exit $?
    fi
    docker_run "$@"
}

main $@
